plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs'
    id 'kotlin-parcelize'
    id 'jacoco'
}

jacoco {
    toolVersion = "0.8.7"
}

tasks.withType(Test) {
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*']
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    group = "reporting"
    description = "genrate jacoco report"
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination = file("$project.buildDir/jacoco/")
        xml.destination = file("$project.buildDir/jacoco/jacoco.xml")
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      '**/*Application*.*',
                      '**/*Activity*.*',
                      '**/*Fragment*.*',
                      '**/delegates/*.*',
                      '**/*Adapter*.*',
                      'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: ['**/testDebugUnitTest.exec'])
}

def globalConf = rootProject.ext

android {
    compileSdk androidTargetSdkVersion

    buildFeatures {
        viewBinding true
    }

    defaultConfig {
        applicationId "com.ravish.android.clean.architecture.kotlin"
        minSdk globalConf.androidMinSdkVersion
        targetSdk globalConf.androidTargetSdkVersion
        versionCode 1
        versionName globalConf.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            testCoverageEnabled true
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

kapt {
    generateStubs = true
}

dependencies {
    Map<String, String> dependencies = globalConf.dependencies

    implementation project(':domain')
    implementation project(':data')

    implementation dependencies.androidxCore
    implementation dependencies.appCompatKtx
    implementation dependencies.androidMaterial
    implementation dependencies.androidConstraintLayout
    implementation dependencies.navGraphFragment
    implementation dependencies.navGraphUI
    implementation dependencies.androidLifecycle
    implementation dependencies.networkingLib

    kapt dependencies.hiltCompiler
    implementation dependencies.hilt

    implementation dependencies.retrofit
    implementation dependencies.retrofitConverterGson
    implementation dependencies.okhttp
    implementation dependencies.okhttpLogging

    implementation dependencies.glide

    testImplementation dependencies.jUnit

    androidTestImplementation dependencies.testRunner
    androidTestImplementation dependencies.androidTestJUnit
    androidTestImplementation dependencies.androidTestEspresso
}